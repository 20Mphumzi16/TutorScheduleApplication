{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  id: \"view_item\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_NavBar = _resolveComponent(\"NavBar\");\n  const _component_ProductComponent = _resolveComponent(\"ProductComponent\");\n  const _component_FooterSection = _resolveComponent(\"FooterSection\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createVNode(_component_NavBar), _createVNode(_component_ProductComponent, {\n    commic: $data.selectedBook\n  }, null, 8 /* PROPS */, [\"commic\"]), _createVNode(_component_FooterSection)]);\n}","map":{"version":3,"names":["id","_createElementBlock","_hoisted_1","_createVNode","_component_NavBar","_component_ProductComponent","commic","$data","selectedBook","_component_FooterSection"],"sources":["C:\\Users\\PC\\Documents\\javaApplications\\My_comic_city_project_0.2\\src\\frontend\\src\\views\\viewItem.vue"],"sourcesContent":["<template>\r\n    <div id=\"view_item\">\r\n      <NavBar />\r\n      <ProductComponent :commic=\"selectedBook\" />\r\n      <FooterSection />\r\n    </div>\r\n</template>\r\n<script>\r\nimport ProductComponent from \"@/components/productComponent.vue\";\r\nimport {getComicBook} from \"@/services/comicBookService\";\r\n\r\nexport default {\r\n  name: 'viewItem',\r\n  components: {\r\n    ProductComponent\r\n  },\r\n  data() {\r\n    return {\r\n      selectedBook: null, // This will hold the book data\r\n    };\r\n  },\r\n  created() {\r\n    // Assuming you're passing the book ID via route params\r\n    const bookId = this.$route.params.bookId;\r\n\r\n    // Fetch or retrieve the book data based on the ID\r\n    // Example (replace with actual fetching logic):\r\n    this.selectedBook = this.fetchComicBook(bookId)\r\n  },\r\n\r\n  methods: {\r\n    async fetchComicBook(bookId) {\r\n      try {\r\n        await getComicBook(bookId);\r\n        alert('Comic found');\r\n      } catch (error) {\r\n        alert('Failed to find comic.');\r\n      }\r\n    },\r\n      }\r\n}\r\n\r\n</script>\r\n"],"mappings":";;EACSA,EAAE,EAAC;AAAW;;;;;uBAAnBC,mBAAA,CAIM,OAJNC,UAIM,GAHJC,YAAA,CAAUC,iBAAA,GACVD,YAAA,CAA2CE,2BAAA;IAAxBC,MAAM,EAAEC,KAAA,CAAAC;EAAY,qCACvCL,YAAA,CAAiBM,wBAAA,E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}