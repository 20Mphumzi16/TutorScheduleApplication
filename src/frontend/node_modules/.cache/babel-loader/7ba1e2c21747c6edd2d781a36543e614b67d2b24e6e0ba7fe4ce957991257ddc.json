{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  data() {\n    return {\n      email: '',\n      password: '',\n      loginError: ''\n    };\n  },\n  methods: {\n    login() {\n      fetch(`/api/comiccity/Customer/login/${encodeURIComponent(this.email)}/${encodeURIComponent(this.password)}`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }).then(response => {\n        if (response.ok) {\n          return response.text();\n        } else {\n          return response.json().then(data => {\n            throw new Error(data.error || 'Invalid email or password');\n          });\n        }\n      }).then(data => {\n        if (data === 'Login successful') {\n          localStorage.setItem('userEmail', this.email); // Store user email or another identifier\n          this.$router.push('/');\n        } else {\n          this.loginError = 'Invalid email or password.';\n        }\n      }).catch(error => {\n        this.loginError = 'Error during login. Please try again later.';\n        console.error('There was a problem with the fetch operation:', error);\n      });\n    },\n    createAccount() {\n      // Handle account creation logic\n      this.loginError = 'Create Account button clicked!';\n      console.log('Creating account with', this.email, this.password);\n    }\n  }\n};","map":{"version":3,"names":["data","email","password","loginError","methods","login","fetch","encodeURIComponent","method","headers","then","response","ok","text","json","Error","error","localStorage","setItem","$router","push","catch","console","createAccount","log"],"sources":["C:\\Users\\PC\\Documents\\javaApplications\\My_comic_city_project_0.2\\src\\frontend\\src\\components\\LoginPage.vue"],"sourcesContent":["<template>\r\n  <div class=\"app-container\">\r\n    <h1 class=\"title\">Welcome to the city of comics!</h1>\r\n    <p class=\"subtitle\">Sign in or create an account to access our comic books.</p>\r\n    <div class=\"input-group\">\r\n      <label class=\"input-label\" for=\"email\">\r\n        <input\r\n            id=\"email\"\r\n            type=\"email\"\r\n            v-model=\"email\"\r\n            placeholder=\"Email\"\r\n            class=\"input-field\"\r\n            required\r\n        />\r\n      </label>\r\n      <label class=\"input-label\" for=\"password\">\r\n        <input\r\n            id=\"password\"\r\n            placeholder=\"Password\"\r\n            type=\"password\"\r\n            class=\"input-field\"\r\n            v-model=\"password\"\r\n            required\r\n        />\r\n      </label>\r\n    </div>\r\n    <div class=\"button-group\">\r\n      <button class=\"login-button\" @click=\"login\">\r\n        <span class=\"button-text\">Log In</span>\r\n      </button>\r\n      <button class=\"create-account-button\" @click=\"createAccount\">\r\n        <span class=\"button-text\">Create Account</span>\r\n      </button>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      email: '',\r\n      password: '',\r\n      loginError: ''\r\n    };\r\n  },\r\n  methods: {\r\n    login() {\r\n      fetch(`/api/comiccity/Customer/login/${encodeURIComponent(this.email)}/${encodeURIComponent(this.password)}`, {\r\n        method: 'GET',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        }\r\n      })\r\n          .then((response) => {\r\n            if (response.ok) {\r\n              return response.text();\r\n            } else {\r\n              return response.json().then(data => {\r\n                throw new Error(data.error || 'Invalid email or password');\r\n              });\r\n            }\r\n          })\r\n          .then((data) => {\r\n            if (data === 'Login successful') {\r\n              localStorage.setItem('userEmail', this.email); // Store user email or another identifier\r\n              this.$router.push('/');\r\n            } else {\r\n              this.loginError = 'Invalid email or password.';\r\n            }\r\n          })\r\n          .catch((error) => {\r\n            this.loginError = 'Error during login. Please try again later.';\r\n            console.error('There was a problem with the fetch operation:', error);\r\n          });\r\n    },\r\n    createAccount() {\r\n      // Handle account creation logic\r\n      this.loginError = 'Create Account button clicked!';\r\n      console.log('Creating account with', this.email, this.password);\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n\r\n<style scoped>\r\n@import url('https://fonts.googleapis.com/css2?family=Be+Vietnam+Pro:wght@400;500;700;900&display=swap');\r\n@import url('https://fonts.googleapis.com/css2?family=Noto+Sans:wght@400;500;700;900&display=swap');\r\n\r\nbody {\r\n  font-family: \"Be Vietnam Pro\", \"Noto Sans\", sans-serif;\r\n  margin: 0;\r\n  padding: 0;\r\n}\r\n\r\n.app-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  min-height: 100vh;\r\n  background-color: #101a23;\r\n}\r\n\r\n.title {\r\n  color: white;\r\n  font-size: 24px;\r\n  font-weight: bold;\r\n  text-align: center;\r\n  margin-bottom: 16px;\r\n}\r\n\r\n.subtitle {\r\n  color: #90adcb;\r\n  font-size: 16px;\r\n  text-align: center;\r\n  margin-bottom: 32px;\r\n}\r\n\r\n.input-group {\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 100%;\r\n  max-width: 400px;\r\n  margin-bottom: 24px;\r\n}\r\n\r\n.input-label {\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.input-field {\r\n  width: 100%;\r\n  border-radius: 8px;\r\n  padding: 12px;\r\n  margin-bottom: 12px;\r\n  font-size: 16px;\r\n  border: none;\r\n  background-color: #223649;\r\n  color: white;\r\n}\r\n\r\n.input-field::placeholder {\r\n  color: #90adcb;\r\n}\r\n\r\n.button-group {\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 100%;\r\n  max-width: 200px;\r\n}\r\n\r\n.login-button, .create-account-button {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  height: 48px;\r\n  border-radius: 8px;\r\n  font-size: 16px;\r\n  font-weight: bold;\r\n  color: white;\r\n  border: none;\r\n  margin-bottom: 16px;\r\n  cursor: pointer;\r\n}\r\n\r\n.login-button {\r\n  background-color: yellow;\r\n}\r\n\r\n.create-account-button {\r\n  background-color: darkgoldenrod;\r\n}\r\n</style>\r\n"],"mappings":";AAsCA,eAAe;EACbA,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,KAAK,EAAE,EAAE;MACTC,QAAQ,EAAE,EAAE;MACZC,UAAU,EAAE;IACd,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACPC,KAAKA,CAAA,EAAG;MACNC,KAAK,CAAC,iCAAiCC,kBAAkB,CAAC,IAAI,CAACN,KAAK,CAAC,IAAIM,kBAAkB,CAAC,IAAI,CAACL,QAAQ,CAAC,EAAE,EAAE;QAC5GM,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB;MACF,CAAC,EACIC,IAAI,CAAEC,QAAQ,IAAK;QAClB,IAAIA,QAAQ,CAACC,EAAE,EAAE;UACf,OAAOD,QAAQ,CAACE,IAAI,CAAC,CAAC;QACxB,OAAO;UACL,OAAOF,QAAQ,CAACG,IAAI,CAAC,CAAC,CAACJ,IAAI,CAACV,IAAG,IAAK;YAClC,MAAM,IAAIe,KAAK,CAACf,IAAI,CAACgB,KAAI,IAAK,2BAA2B,CAAC;UAC5D,CAAC,CAAC;QACJ;MACF,CAAC,EACAN,IAAI,CAAEV,IAAI,IAAK;QACd,IAAIA,IAAG,KAAM,kBAAkB,EAAE;UAC/BiB,YAAY,CAACC,OAAO,CAAC,WAAW,EAAE,IAAI,CAACjB,KAAK,CAAC,EAAE;UAC/C,IAAI,CAACkB,OAAO,CAACC,IAAI,CAAC,GAAG,CAAC;QACxB,OAAO;UACL,IAAI,CAACjB,UAAS,GAAI,4BAA4B;QAChD;MACF,CAAC,EACAkB,KAAK,CAAEL,KAAK,IAAK;QAChB,IAAI,CAACb,UAAS,GAAI,6CAA6C;QAC/DmB,OAAO,CAACN,KAAK,CAAC,+CAA+C,EAAEA,KAAK,CAAC;MACvE,CAAC,CAAC;IACR,CAAC;IACDO,aAAaA,CAAA,EAAG;MACd;MACA,IAAI,CAACpB,UAAS,GAAI,gCAAgC;MAClDmB,OAAO,CAACE,GAAG,CAAC,uBAAuB,EAAE,IAAI,CAACvB,KAAK,EAAE,IAAI,CAACC,QAAQ,CAAC;IACjE;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}